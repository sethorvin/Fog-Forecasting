"""
This script assumes that processed_data_china_winter2024.csv has been
generated by feature_engineering.py

NOTE that hyperparameter tuning has not yet been tested on this XGBoost estimator. The reasons are
as follows: the random forest model showed more initial promise*; the random forest model's tuning
lasted half an hour (with the best result showing minimal improvement); and I anticipate that the
XGBoost model might take longer to tune (for potentially likewise minimal improvement).
*Specifically, Random Forest models were showing better ROC AUC scores. However, XGBoost models were
showing better recall while RF models were showing better precision.
Seth Orvin
"""

import pandas as pd
import os
import sys
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score
from xgboost import XGBClassifier

# Get the path to the data directory, relative to this script
script_dir = os.path.dirname(os.path.abspath(__file__))
data_path = os.path.join(script_dir, '..', 'data', 'processed_data_china_winter2024.csv')

# Attempt to load data into a DataFrame, exit otherwise
if os.path.exists(data_path):
    try:
        df = pd.read_csv(data_path, parse_dates=['time'], low_memory=False)
        df.sort_values(by=['station', 'time'], inplace=True)
    except Exception as e:
        print('Error loading processed data file: {e}')
        sys.exit(1)
else:
    print(f'File not found at {data_path}')
    sys.exit(1)

# Create binary fog label (1 if fog, 0 otherwise)
df['is_fog'] = df['coco'].isin([5, 6]).astype(int) # https://dev.meteostat.net/formats.html#weather-condition-codes

# Create target for forecasting: Was there fog 1 hour later?
df['is_fog_in_1h'] = df.groupby('station')['is_fog'].shift(-1)

# Drop rows with missing target
df = df.dropna(subset=['is_fog_in_1h'])
df['is_fog_in_1h'] = df['is_fog_in_1h'].astype(int)

# Define features and target
features = [
    'd2m', 't2m', 'sp', 'lcc', 'tcc', 'swvl1', 'blh',
    'latitude', 'longitude', 'wind_speed', 'relative_humidity',
]
target = 'is_fog_in_1h'

X = df[features]
y = df[target]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# Train XGBoost classifier
xgb_model = XGBClassifier(
    n_estimators=100,
    max_depth=6,
    learning_rate=0.1,
    scale_pos_weight=(len(y_train) - sum(y_train)) / sum(y_train),  # Handle class imbalance
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42
)
xgb_model.fit(X_train, y_train)

# Make predictions
y_pred = xgb_model.predict(X_test)
y_prob = xgb_model.predict_proba(X_test)[:, 1]

# Evaluation
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("ROC AUC Score:", roc_auc_score(y_test, y_prob))